import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

apply plugin: 'java'

group 'BlogGroup'
version '1.0-SNAPSHOT'

description = """tsweb"""

sourceCompatibility = 1.5

repositories {
    jcenter()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:3.1.0'
    }
}

dependencies {
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.53.1'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'net.sourceforge.jexcelapi', name: 'jxl', version: '2.6.12'
    compile group: 'jcifs', name: 'jcifs', version: '1.3.17'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.6'
    compile group: 'com.nativelibs4java', name: 'bridj', version: '0.7.0'
    compile fileTree(dir: './lib')
}

// code to 'cucumber-reporting:3.1.0' reports
def generateReport(String pathCucumber, String pathReport) {
    File jsonFile = new File(pathCucumber)
    if (jsonFile.exists()) {
        File reportOutputDirectory = new File(pathReport)
        List<String> jsonReportFiles = new ArrayList<>()
        jsonReportFiles.add(pathCucumber)
        String buildProjectName = 'blog'
        Configuration configuration = new Configuration(reportOutputDirectory, buildProjectName)
        ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
        reportBuilder.generateReports()
    }
}

def String splitFeatureFolders(String featureFolders) {
    def featureBasePath = 'classpath:'
    String[] listFeatureFolders = featureFolders.split(',')
    StringBuilder listFeaturesPath = new StringBuilder();
    listFeatureFolders.each { String item -> listFeaturesPath.append(featureBasePath + item.trim() + ' ') }
    return listFeaturesPath.toString()
}

tasks.withType(Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the features.test JVM(s)
    scanForTestClasses = false
    ignoreFailures = true

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    // Define the custom properties to run the regression
    systemProperty "blogUrl", blogUrl
    systemProperty "browserName", browserName
    println('browserName>>>>>'+browserName)
}

task executeFeatures(type: Test) {
    //Define file name to store the build number and the execution status
//    systemProperty "build.properties", 'build.properties'

    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue com.devops.blog ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumber.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
                           splitFeatureFolders(featureFolders) + ' ' +
                           cucumberOptions]
    }

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}